<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sasaya 技術筆記</title>
  
  
  <link href="https://blog.sasaya.me/atom.xml" rel="self"/>
  
  <link href="https://blog.sasaya.me/"/>
  <updated>2021-04-22T17:44:23.145Z</updated>
  <id>https://blog.sasaya.me/</id>
  
  <author>
    <name>Sasaya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用位元運算讓程式更簡潔</title>
    <link href="https://blog.sasaya.me/2021/04/22/logical-bitwise/"/>
    <id>https://blog.sasaya.me/2021/04/22/logical-bitwise/</id>
    <published>2021-04-22T15:26:02.000Z</published>
    <updated>2021-04-22T17:44:23.145Z</updated>
    
    <content type="html"><![CDATA[<p>邏輯運算我們平時都用得多，但位元運算似乎就顯少使用。<br>其實位元運算在程式設計中扮演著非常重要的角色，他不僅可以讓程式更簡潔，效能也比較好呢！</p><span id="more"></span><h2 id="位元運算子"><a href="#位元運算子" class="headerlink" title="位元運算子"></a>位元運算子</h2><p>先讓我們復習一下位元運算子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AND</span></span><br><span class="line"><span class="number">0</span> &amp; <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="number">0</span> &amp; <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="number">1</span> &amp; <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="number">1</span> &amp; <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"><span class="number">0</span> | <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="number">0</span> | <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> | <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> | <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// XOR</span></span><br><span class="line"><span class="number">0</span> ^ <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="number">0</span> ^ <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> ^ <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> ^ <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NOT</span></span><br><span class="line">!<span class="number">0</span> = <span class="number">1</span></span><br><span class="line">!<span class="number">1</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>複習完了之後，就可以來實戰了！</p><p>註：以下範例利用 JavaScript「0 為 false；1 為 true」的特性，讓程式碼更簡潔，但並非所有程式語言都適用。</p><h2 id="奇偶數判斷"><a href="#奇偶數判斷" class="headerlink" title="奇偶數判斷"></a>奇偶數判斷</h2><h3 id="一般作法"><a href="#一般作法" class="headerlink" title="一般作法"></a>一般作法</h3><p>一般我們都會用 <code>%</code>（取餘數）的方式來判斷奇偶數。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEven = <span class="function">(<span class="params">n</span>) =&gt;</span> n % <span class="number">2</span></span><br><span class="line"></span><br><span class="line">isEven(<span class="number">3</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="位元運算"><a href="#位元運算" class="headerlink" title="位元運算"></a>位元運算</h3><p>因為奇數轉換成 2 進位之後最後一位一定會是 1，因此我們就可以用 AND 來簡單判斷是否為奇數了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isOdd = <span class="function">(<span class="params">n</span>) =&gt;</span> n &amp; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">isOdd(<span class="number">3</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="0-1-切換（Toggle）"><a href="#0-1-切換（Toggle）" class="headerlink" title="0 / 1 切換（Toggle）"></a>0 / 1 切換（Toggle）</h2><h3 id="一般作法-1"><a href="#一般作法-1" class="headerlink" title="一般作法"></a>一般作法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> show = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">show = !show <span class="comment">// true</span></span><br><span class="line">show = !show <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="位元運算-1"><a href="#位元運算-1" class="headerlink" title="位元運算"></a>位元運算</h3><p>利用 XOR 相同為 0 相異為 1 的特性，因此可以簡單 0 / 1 切換。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> show = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">show ^= <span class="number">1</span> <span class="comment">// 1</span></span><br><span class="line">show ^= <span class="number">1</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="進階應用-交集-聯集"><a href="#進階應用-交集-聯集" class="headerlink" title="進階應用 - 交集 / 聯集"></a>進階應用 - 交集 / 聯集</h2><h3 id="需求說明"><a href="#需求說明" class="headerlink" title="需求說明"></a>需求說明</h3><p>每個學生可以選修多個課程，要設計一個功能，輸入課程，並列出有選修該課程的學生們。</p><h3 id="一般作法-2"><a href="#一般作法-2" class="headerlink" title="一般作法"></a>一般作法</h3><p>想到多個課程，那當然就是用陣列啦，但在判斷聯集的時候就會非常麻煩，如果量一大，效能也會成為一大問題。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ENGLISH = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> MATHEMATICS = <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> PHYSICAL = <span class="number">3</span></span><br><span class="line"><span class="keyword">const</span> CHEMICAL = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> students = [</span><br><span class="line">  &#123; <span class="attr">courses</span>: [ENGLISH] &#125;,</span><br><span class="line">  &#123; <span class="attr">courses</span>: [MATHEMATICS] &#125;,</span><br><span class="line">  &#123; <span class="attr">courses</span>: [ENGLISH, PHYSICAL] &#125;,</span><br><span class="line">  &#123; <span class="attr">courses</span>: [MATHEMATICS, CHEMICAL] &#125;,</span><br><span class="line">  &#123; <span class="attr">courses</span>: [ENGLISH, PHYSICAL, CHEMICAL] &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> findStudentsViaCourses = <span class="function">(<span class="params">courses</span>) =&gt;</span></span><br><span class="line">  <span class="keyword">return</span> students.filter(<span class="function">(<span class="params">student</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> course <span class="keyword">of</span> courses) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!stuudents.courses.includes(course)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findStudentsViaCourses([ENGLISH, PHYSICAL])</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123; courses: [ENGLISH, PHYSICAL] &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; courses: [ENGLISH, PHYSICAL, CHEMICAL] &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h3 id="位元運算-2"><a href="#位元運算-2" class="headerlink" title="位元運算"></a>位元運算</h3><p>先看結果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ENGLISH = <span class="number">0b0001</span> <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">const</span> MATHEMATICS = <span class="number">0b0010</span> <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">const</span> PHYSICAL = <span class="number">0b0100</span> <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">const</span> CHEMICAL = <span class="number">0b1000</span> <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> students = [</span><br><span class="line">  &#123; <span class="attr">courses</span>: ENGLISH &#125;,</span><br><span class="line">  &#123; <span class="attr">courses</span>: MATHEMATICS &#125;,</span><br><span class="line">  &#123; <span class="attr">courses</span>: ENGLISH | PHYSICAL &#125;,</span><br><span class="line">  &#123; <span class="attr">courses</span>: MATHEMATICS | CHEMICAL &#125;,</span><br><span class="line">  &#123; <span class="attr">courses</span>: ENGLISH | PHYSICAL | CHEMICAL &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> findStudentsViaCourses = <span class="function">(<span class="params">courses</span>) =&gt;</span></span><br><span class="line">  <span class="keyword">return</span> students.filter(<span class="function">(<span class="params">student</span>) =&gt;</span> student.courses &amp; courses === courses)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findStudentsViaCourses(ENGLISH | PHYSICAL)</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123; courses: ENGLISH | PHYSICAL &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; courses: ENGLISH | PHYSICAL | CHEMICAL &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>首先，我們要先把各個課程的值都改成 2 的次方倍（第 1 - 4 行）<br>然後將原本的陣列改成位元運算的交集（第 7 - 11 行）<br>最後將篩選的方法改成位元運算的連集（第 15 行）<br>程式整個變得超簡潔對吧！</p><p>但，怎麼做到的呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ENGLISH = <span class="number">0b0001</span></span><br><span class="line"><span class="keyword">const</span> MATHEMATICS = <span class="number">0b0010</span></span><br><span class="line"><span class="keyword">const</span> PHYSICAL = <span class="number">0b0100</span></span><br><span class="line"><span class="keyword">const</span> CHEMICAL = <span class="number">0b1000</span></span><br></pre></td></tr></table></figure><p>我們可以發現，每個課程剛好只有一個位元是 <code>1</code>，換句話說就是一個位元代表一個課程，我們只要看哪個位元是 <code>1</code> 就可以知道是哪個課程了。</p><p>那如果是多個課程呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ENGLISH_AND_MATHEMATICS = ENGLISH | MATHEMATICS <span class="comment">// 0b0011</span></span><br></pre></td></tr></table></figure><p>我們剛剛已經知道一個位元就代表一個課程，那如東多個位元是 <code>1</code>，就代表是多個課程啦～</p><p>篩選又是怎麼做到的呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENGLISH_AND_MATHEMATICS &amp; ENGLISH <span class="comment">// 0b0011 &amp; 0b0001 = 0b0001</span></span><br><span class="line">ENGLISH_AND_MATHEMATICS &amp; CHEMICAL <span class="comment">// 0b0011 &amp; 0b1000 = 0b0000</span></span><br></pre></td></tr></table></figure><p>看了上面的例子應該就可以很發現，我們同樣利用了一個位元代表一個課程的原理，去比較兩者是否擁有相同的課程來做到交集的判斷。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>位元運算不只可以用在程式碼裡面，其實也可以用在資料庫查詢唷！<br>試想看看剛剛的 <code>students</code> 如果存在資料庫裡，又要做正規劃的話，那資料表會是什麼樣子的呢？<br>利用位元運算的話，竟然只要一張表就可以完成了耶！很神奇對吧～<br>大家也試著開始把位元運算運用在自己的專案裡吧！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;邏輯運算我們平時都用得多，但位元運算似乎就顯少使用。&lt;br&gt;其實位元運算在程式設計中扮演著非常重要的角色，他不僅可以讓程式更簡潔，效能也比較好呢！&lt;/p&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="https://blog.sasaya.me/tags/Algorithm/"/>
    
    <category term="Bitwise" scheme="https://blog.sasaya.me/tags/Bitwise/"/>
    
    <category term="JavaScript" scheme="https://blog.sasaya.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>設計模式 - 代理模式 x 快取 x Metaprogramming</title>
    <link href="https://blog.sasaya.me/2021/04/20/design-pattern-proxy/"/>
    <id>https://blog.sasaya.me/2021/04/20/design-pattern-proxy/</id>
    <published>2021-04-20T14:03:18.000Z</published>
    <updated>2021-04-22T17:44:23.145Z</updated>
    
    <content type="html"><![CDATA[<p>當我們想為某個 Class 裡 Method 的執行結果加上快取，直覺就會聯想到 - 代理模式。<br>但如果 Method 一多，代理層寫起來就會又臭又長，一大堆重覆的東西，想到就累了。<br>那我們有沒有什麼辦法可以簡化代理層，讓開發更省力呢？當然有！那就是 Metaprogramming。</p><span id="more"></span><h2 id="傳統代理模式（Proxy-Pattern）"><a href="#傳統代理模式（Proxy-Pattern）" class="headerlink" title="傳統代理模式（Proxy Pattern）"></a>傳統代理模式（Proxy Pattern）</h2><p>我們先來看看傳統的寫法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFoo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Subject <span class="variable">$subject</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">array</span> <span class="variable">$cache</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Subject <span class="variable">$subject</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;subject = <span class="variable">$subject</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFoo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;cache[<span class="string">&#x27;getFoo&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;cache[<span class="string">&#x27;getFoo&#x27;</span>] = <span class="keyword">$this</span>-&gt;subject-&gt;getFoo();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;cache[<span class="string">&#x27;getFoo&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;cache[<span class="string">&#x27;getBar&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;cache[<span class="string">&#x27;getBar&#x27;</span>] = <span class="keyword">$this</span>-&gt;subject-&gt;getBar();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;cache[<span class="string">&#x27;getBar&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們可以發現到 <code>Proxy</code> 裡有大量重覆的東西，看了實在非常不舒服 X_X</p><h2 id="加入-Metaprogramming"><a href="#加入-Metaprogramming" class="headerlink" title="加入 Metaprogramming"></a>加入 Metaprogramming</h2><p>拜 PHP 所𧶽，我們可以非常簡單實作 Metaprogramming，PHP 提供了大量的 Magic Methods，這次我們會使用到的是 <code>__call()</code>。<br><code>__call()</code> 是什麼呢？來看一段小程式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="variable">$method</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$proxy</span> = <span class="keyword">new</span> Proxy;</span><br><span class="line"><span class="variable">$proxy</span>-&gt;getFoo(); <span class="comment">// string(6) &quot;getFoo&quot;</span></span><br></pre></td></tr></table></figure><p>從上面的例子可以發現，<code>Proxy</code> 中明明就沒有 <code>getFoo()</code> 這個 Method，但第 10 行的程式卻不會出錯，反而還有印出結果，為什麼呢？<br>這是因為 <code>Proxy</code> 有 <code>__call()</code> 這個 Method，只要呼叫了沒有宣告過的 Method，就會往 <code>__call()</code> 跑。</p><p>此時我們就可以利用這個特性來改寫我們的快取代理：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Subject <span class="variable">$subject</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">array</span> <span class="variable">$cache</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Subject <span class="variable">$subject</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;subject = <span class="variable">$subject</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;cache[<span class="variable">$method</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;cache[<span class="variable">$method</span>] = <span class="keyword">$this</span>-&gt;subject-&gt;<span class="variable">$method</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;cache[<span class="variable">$method</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一來，重覆的程式碼就都不見了呢！就算 <code>Subject</code> 裡的 Method 再多也不用怕了～<br>但，真的是這樣嗎？<br>其實這麼做還是有缺點的，<code>Proxy</code> 裡並沒有宣告被呼叫的 Method，使程式碼追蹤不易，進而造成維護上的困難。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>雖然運用 <code>__call()</code> 讓我們在開發上節省了許多力氣，但如果我們今天是團隊合作開發時，還是要三思呀！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;當我們想為某個 Class 裡 Method 的執行結果加上快取，直覺就會聯想到 - 代理模式。&lt;br&gt;但如果 Method 一多，代理層寫起來就會又臭又長，一大堆重覆的東西，想到就累了。&lt;br&gt;那我們有沒有什麼辦法可以簡化代理層，讓開發更省力呢？當然有！那就是 Metaprogramming。&lt;/p&gt;</summary>
    
    
    
    
    <category term="DesignPattern" scheme="https://blog.sasaya.me/tags/DesignPattern/"/>
    
    <category term="PHP" scheme="https://blog.sasaya.me/tags/PHP/"/>
    
    <category term="Cache" scheme="https://blog.sasaya.me/tags/Cache/"/>
    
    <category term="Metaprogramming" scheme="https://blog.sasaya.me/tags/Metaprogramming/"/>
    
  </entry>
  
  <entry>
    <title>為什麼需要 SSR（Server Side Render）</title>
    <link href="https://blog.sasaya.me/2021/04/19/why-ssr/"/>
    <id>https://blog.sasaya.me/2021/04/19/why-ssr/</id>
    <published>2021-04-19T12:54:25.000Z</published>
    <updated>2021-04-22T17:44:23.145Z</updated>
    
    <content type="html"><![CDATA[<p>在以前沒有 SPA（Single Page Application，前後端分離）架構的時代，畫面都是在 Server 端就已經 Render 好，然後才傳送到前端的，也就是說，使用者（機器人）在拿到畫面的時候，就已經是完整的資料了。<br>若使用了 SPA 的架構，Server 端將不再 Render 畫面，只處理資料的部份，但畫面總要有人 Render，使用者才有東西看，也就是說，Render 畫面的重責大任就交到前端手上了，也就是我們常說的 CSR（Client Side Render）。<br>因此，當使用了 SPA 的架構，機器人在逛網站的時候就拿不到完整的網站了（因為 Server 端不再 Render 畫面），也就是說機器人看到的網頁只是空白一片，沒有任何內容，此時 SEO 便出現了巨大的問題。<br>那 SEO 的問題該怎麼辦呢？難到要放棄 SPA，技術退回 10 年前嗎？當然不是！</p><span id="more"></span><h2 id="解決方案"><a href="#解決方案" class="headerlink" title="解決方案"></a>解決方案</h2><p>其實只要讓 Server 端能夠 Render 完整的畫面，便能解決 SEO 的問題。<br>這裡的意思並不是要放棄 SPA，而是讓 Server 端代替前端來 Render 畫面，如此一來使用者（機器人）在拿到畫面的時候就直接是完整的畫面了，直接看下圖：</p><p><img src="render.svg"></p><p>在 Server 端 Render SPA 架構的畫面，可以分成 Prerender 與 Server Side Render 兩種技術，但，差別在哪呢？</p><h3 id="Prerender"><a href="#Prerender" class="headerlink" title="Prerender"></a>Prerender</h3><p>預先 Render 好所有完整的頁面，當使用者來訪問頁面的時候，就將已經 Render 好的完整頁面回傳給使用者。</p><p>Render 時機：</p><ul><li>前端程式更新後</li><li>後端資料更新後</li></ul><p>缺點：</p><ul><li>後端更新時就需要重新 Render 畫面，後端資料更新頻繁時很吃系統資源</li><li>網站如果有權限管控（使用者登入），系統將會有兩套 Render 的機制（因為只有不需要權限的部份要 Prerender），如此一來系統複雜度加大大增加</li></ul><h3 id="Server-Side-Render"><a href="#Server-Side-Render" class="headerlink" title="Server Side Render"></a>Server Side Render</h3><p>當使用者訪問的時候，才 Render 畫面，再回傳給使用者。</p><p>Render 時機：</p><ul><li>使用者訪問時</li></ul><p>缺點：</p><ul><li>一有使用者訪問就需要 Render 畫面，流量大時很吃系統資源</li></ul><h2 id="如何選擇"><a href="#如何選擇" class="headerlink" title="如何選擇"></a>如何選擇</h2><p>在考量系統複雜度及後續維護成本的基礎下，只要網站有後台或是權限管控的功能，都會直接選用 SSR，必竟，機器還是便宜過人力成本的。<br>當然 SSR 也不是萬靈丹，還是需要經過綜合評估後才能選出最適合當下的解決方案。</p><h2 id="Nuxt-js"><a href="#Nuxt-js" class="headerlink" title="Nuxt.js"></a>Nuxt.js</h2><p>雖然已經選擇了 SSR，但要從零搭建 SSR 服務是非常麻煩且費工的，不過沒關係，介紹大家一個好工具 - <a href="https://nuxtjs.org/">Nuxt.js</a>！<br><a href="https://nuxtjs.org/">Nuxt.js</a> 讓我們可以專注在 <a href="https://vuejs.org/">Vue.js</a> 的開發，將 SSR 這種麻煩事全部交給 <a href="https://nuxtjs.org/">Nuxt.js</a> 來處理。</p><hr><p>註：雖然 Google Search Bot 已經有支援 SPA 架構的 CSR 了，不過結果並不是 100% 正確的，所以在本文撰寫的當下，SSR 或 Prerender 還是必要的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在以前沒有 SPA（Single Page Application，前後端分離）架構的時代，畫面都是在 Server 端就已經 Render 好，然後才傳送到前端的，也就是說，使用者（機器人）在拿到畫面的時候，就已經是完整的資料了。&lt;br&gt;若使用了 SPA 的架構，Server 端將不再 Render 畫面，只處理資料的部份，但畫面總要有人 Render，使用者才有東西看，也就是說，Render 畫面的重責大任就交到前端手上了，也就是我們常說的 CSR（Client Side Render）。&lt;br&gt;因此，當使用了 SPA 的架構，機器人在逛網站的時候就拿不到完整的網站了（因為 Server 端不再 Render 畫面），也就是說機器人看到的網頁只是空白一片，沒有任何內容，此時 SEO 便出現了巨大的問題。&lt;br&gt;那 SEO 的問題該怎麼辦呢？難到要放棄 SPA，技術退回 10 年前嗎？當然不是！&lt;/p&gt;</summary>
    
    
    
    
    <category term="SSR" scheme="https://blog.sasaya.me/tags/SSR/"/>
    
    <category term="SPA" scheme="https://blog.sasaya.me/tags/SPA/"/>
    
    <category term="Prerender" scheme="https://blog.sasaya.me/tags/Prerender/"/>
    
    <category term="Nuxt.js" scheme="https://blog.sasaya.me/tags/Nuxt-js/"/>
    
    <category term="Vue.js" scheme="https://blog.sasaya.me/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>設計模式 - 偷懶工廠模式</title>
    <link href="https://blog.sasaya.me/2021/04/18/design-pattern-factory/"/>
    <id>https://blog.sasaya.me/2021/04/18/design-pattern-factory/</id>
    <published>2021-04-18T15:15:34.000Z</published>
    <updated>2021-04-22T17:44:23.145Z</updated>
    
    <content type="html"><![CDATA[<p>工廠模式我想大家一定不陌生，但偷懶工廠又是什麼呢？<br>我們會想要用工廠模式，基本上就是為了要解耦合，但付出的代價似乎不小，不僅造成日後擴充的問題，還大大增加了程式複雜度。<br>那我們有沒有什麼辦法可以用工廠模式來解耦合，同時又可以擴充容易，也不會讓程式複雜度增加太多呢？<br>這時偷懶工廠模式就登埸了！</p><span id="more"></span><h2 id="簡單工廠模式（Simple-Factory-Pattern）"><a href="#簡單工廠模式（Simple-Factory-Pattern）" class="headerlink" title="簡單工廠模式（Simple Factory Pattern）"></a>簡單工廠模式（Simple Factory Pattern）</h2><p>首先讓我們複習一下簡單工廠模式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseClientFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> create(<span class="keyword">string</span> <span class="variable">$driver</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$driver</span> === <span class="string">&#x27;MySQL&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MySQLClient;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$driver</span> === <span class="string">&#x27;SQLite&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SQLiteClient;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;<span class="subst">&#123;$driver&#125;</span> is not supported.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$mysqlClient</span> = DatabaseClientFactory::create(<span class="string">&#x27;MySQL&#x27;</span>);</span><br><span class="line"><span class="variable">$sqliteClient</span> = DatabaseClientFactory::create(<span class="string">&#x27;SQLite&#x27;</span>);</span><br></pre></td></tr></table></figure><p>簡單工廠最大的缺點就是：擴充時需要修改 <code>DatabaseClientFactory</code>，違反了開放封閉原則。</p><h2 id="工廠模式（Factory-Pattern）"><a href="#工廠模式（Factory-Pattern）" class="headerlink" title="工廠模式（Factory Pattern）"></a>工廠模式（Factory Pattern）</h2><p>為了要符合開放封閉原則，因此我們改用工廠模式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLClientFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> create()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySQLClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLiteClientFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> create()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SQLiteClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$mysqlClient</span> = MySQLClientFactory::create();</span><br><span class="line"><span class="variable">$sqliteClient</span> = SQLiteClientFactory::create();</span><br></pre></td></tr></table></figure><p>雖然符合開放封閉原則了，擴充變得更加容易，但程式複雜度也增加了，難到不能兩全齊美嗎？<br>答案是可以的！讓我們繼續看下去～</p><h2 id="偷懶工廠模式"><a href="#偷懶工廠模式" class="headerlink" title="偷懶工廠模式"></a>偷懶工廠模式</h2><p>廢話不多說，直接看程式碼：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseClientFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> create(<span class="keyword">string</span> <span class="variable">$driver</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$className</span> = <span class="string">&quot;<span class="subst">&#123;$driver&#125;</span>Client&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! class_exists(<span class="variable">$className</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;<span class="subst">&#123;$driver&#125;</span> is not supported.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable">$className</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$mysqlClient</span> = DatabaseClientFactory::create(<span class="string">&#x27;MySQL&#x27;</span>);</span><br><span class="line"><span class="variable">$sqliteClient</span> = DatabaseClientFactory::create(<span class="string">&#x27;SQLite&#x27;</span>);</span><br></pre></td></tr></table></figure><p>主要是利用 PHP 的語言特性，讓我們可以動態組成 Class Name，如此一來不僅讓程式變得更簡單，還同時符合了開放封閉原則，還真是兩全齊美呢！<br>但，真的是這樣嗎？<br>其實這麼做還是有缺點的，那就是無法簡單追蹤到 Class 被實例化的地方，造成程式碼維護不易，也因此我把他稱為偷懶工廠模式，沒錯，這個名字是我自己取的 XD</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>雖然偷懶工廠模式讓我們在開發上節省了許多力氣，但如果我們今天是團隊合作開發時，還是要三思呀！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;工廠模式我想大家一定不陌生，但偷懶工廠又是什麼呢？&lt;br&gt;我們會想要用工廠模式，基本上就是為了要解耦合，但付出的代價似乎不小，不僅造成日後擴充的問題，還大大增加了程式複雜度。&lt;br&gt;那我們有沒有什麼辦法可以用工廠模式來解耦合，同時又可以擴充容易，也不會讓程式複雜度增加太多呢？&lt;br&gt;這時偷懶工廠模式就登埸了！&lt;/p&gt;</summary>
    
    
    
    
    <category term="DesignPattern" scheme="https://blog.sasaya.me/tags/DesignPattern/"/>
    
    <category term="PHP" scheme="https://blog.sasaya.me/tags/PHP/"/>
    
  </entry>
  
</feed>
